package application;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

public class Main_Menu_EmployeeModel{
	private final SimpleIntegerProperty EmployeesID;
	private final SimpleStringProperty EmployeesFirst_Name;
	private final SimpleStringProperty EmployeesLast_Name;
	private final SimpleStringProperty EmployeesEmail;
	private final SimpleStringProperty EmployeesPhone;
	private final SimpleStringProperty EmployeesAddress;
	private final SimpleStringProperty EmployeesDOB;
	private final SimpleIntegerProperty EmployeesisActive;
    Connection connection;
	
    private Statement statement;
    private ResultSet resultSet;
    
    
	public Main_Menu_EmployeeModel(int EmployeesID, String EmployeesFirst_Name, String EmployeesLast_Name, String EmployeesEmail, String EmployeesPhone, String EmployeesAddress, String EmployeesDOB, int EmployeesisActive){

		this.EmployeesID = new SimpleIntegerProperty(EmployeesID);
		this.EmployeesFirst_Name = new SimpleStringProperty(EmployeesFirst_Name);
		this.EmployeesLast_Name = new SimpleStringProperty(EmployeesLast_Name);
		this.EmployeesEmail = new SimpleStringProperty(EmployeesEmail);
		this.EmployeesPhone = new SimpleStringProperty(EmployeesPhone);
		this.EmployeesAddress = new SimpleStringProperty(EmployeesAddress);
		this.EmployeesDOB = new SimpleStringProperty(EmployeesDOB);
		this.EmployeesisActive = new SimpleIntegerProperty(EmployeesisActive);
		connection = SqliteConnection.Connector();
	}
	
	 private ObservableList getDataFromSqlAndAddToObservableList(String query){
	        ObservableList<Main_Menu_EmployeeModel> adminTableData = FXCollections.observableArrayList();
	        try {

	            connection = database.getConnection();
	            statement = connection.createStatement();
	            resultSet = statement.executeQuery(query);//"SELECT * FROM students;"
	            while(resultSet.next()){
	                adminTableData.add(new AdminTable(
	                        resultSet.getInt("dbStudentSerialNo"),
	                        resultSet.getString("dbStudentFname")+" "+resultSet.getString("dbStudentLname"),
	                        resultSet.getString("dbStudentID"),
	                        resultSet.getString("dbStudentDepartment"),
	                        resultSet.getDouble("dbStudentCgpa"),
	                        resultSet.getString("dbStudentPhone"),
	                        resultSet.getString("dbStudentDOB"),
	                        resultSet.getString("dbGuardianFname")+" "+resultSet.getString("dbGuardianLname"),
	                        resultSet.getString("dbGuardianEmail"),
	                        resultSet.getString("dbGuardianPhone"),
	                        resultSet.getString("dbStudentAddress")

	                        ));
	            }
	            connection.close();
	            statement.close();
	            resultSet.close();
	        } catch (SQLException e) {
	            e.printStackTrace();
	        }
	        return adminTableData;

	    }


	    @Override
	    public void initialize(URL location, ResourceBundle resources) {


	        //1st initially get all data from MySQL server
	        //And set it to Observable arrayList
	        //getDataFromSqlAndAddToObservableList();


	        //Get data from adminTableData ObservableList and set thus data on JavaFX table column

	        adminTableStudentNo.setCellValueFactory(new PropertyValueFactory<AdminTable,Integer>("adminTableDataNo")); // Point JavaFX adminTableStudentNo column at AdminTable's adminTableDataNo variable Property
	        adminTableStudentName.setCellValueFactory(new PropertyValueFactory<AdminTable, String>("adminTableDataStudentName"));
	        adminTableStudentID.setCellValueFactory(new PropertyValueFactory<AdminTable, String>("adminTableDataStudentID"));
	        adminTableStudentDepartment.setCellValueFactory(new PropertyValueFactory<AdminTable, String>("adminTableDataStudentDepartment"));
	        adminTableStudentCGPA.setCellValueFactory(new PropertyValueFactory<AdminTable, Double>("adminTableDataStudentCGPA"));
	        adminTableStudentPhone.setCellValueFactory(new PropertyValueFactory<AdminTable, String>("adminTableDataStudentPhone"));
	        adminTableStudentDOB.setCellValueFactory(new PropertyValueFactory<AdminTable, String>("adminTableDataStudentDOB"));
	        adminTableGuardianName.setCellValueFactory(new PropertyValueFactory<AdminTable, String>("adminTableDataGuardianName"));
	        adminTableGuardianEmail.setCellValueFactory(new PropertyValueFactory<AdminTable, String>("adminTableDataGuardianEmail"));
	        adminTableGuardianPhone.setCellValueFactory(new PropertyValueFactory<AdminTable, String>("adminTableDataGuardianPhone"));
	        adminTableStudentAddress.setCellValueFactory(new PropertyValueFactory<AdminTable, String>("adminTableDataStudentAddress"));
	        //

	        adminTableView.setItems(getDataFromSqlAndAddToObservableList("SELECT * FROM student;"));//Point JavaFX table at adminTableData ObservableList

	    }

	//getters
	
	public SimpleIntegerProperty getEmployeesID() {
		return EmployeesID;
	}
	
	public SimpleStringProperty getEmployeesFirst_Name() {
		return EmployeesFirst_Name;
	}
	
	public SimpleStringProperty getEmployeesLast_Name() {
		return EmployeesLast_Name;
	}
	
	public SimpleStringProperty getEmployeesEmail() {
		return EmployeesEmail;
	}
	
	public SimpleStringProperty getEmployeesPhone() {
		return EmployeesPhone;
	}
	
	public SimpleStringProperty getEmployeesAddress() {
		return EmployeesAddress;
	}
	
	public SimpleStringProperty getEmployeesDOB() {
		return EmployeesDOB;
	}
	
	public SimpleIntegerProperty getEmployeesisActive() {
		return EmployeesisActive;
	}
	
	//setters
	
	public void setEmployeesID(int EmployeesID) {
		this.EmployeesID.set(EmployeesID);
	}
	
	public void setEmployeesFirst_Name(String First_Name) {
		this.EmployeesFirst_Name.set(First_Name);
	}
	
	public void setEmployeesLast_Name(String Last_Name) {
		this.EmployeesLast_Name.set(Last_Name);
	}
	
	public void setEmployeesEmail(String Email) {
		this.EmployeesEmail.set(Email);
	}
	
	public void setEmployeesPhone(String Phone) {
		this.EmployeesPhone.set(Phone);
	}
	
	public void setEmployeesAddress(String Address) {
		this.EmployeesAddress.set(Address);
	}
	
	public void setEmployeesDOB(String DOB) {
		this.EmployeesDOB.set(DOB);
	}
	
	public void setEmployeesisActive(int isActive) {
		this.EmployeesisActive.set(isActive);
	}
		
}


