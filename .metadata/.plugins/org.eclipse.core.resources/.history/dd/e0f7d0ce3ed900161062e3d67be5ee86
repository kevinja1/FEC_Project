package application;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ResourceBundle;

import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import javafx.util.Duration;
import tray.notification.NotificationType;
import tray.notification.TrayNotification;
import javafx.scene.control.DatePicker;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class Menu_CustomerController implements Initializable {
	
	public Menu_CustomerModel Customers_Table_Screen = new Menu_CustomerModel();
	
	@FXML
	private Button txtAdd;
	@FXML
	private TextField txtFirst_Name;
	@FXML
	private TextField txtLast_Name;
	@FXML
	private TextField txtEmail;
	@FXML
	private TextField txtPhone;
	@FXML
	private TextField txtAddress;
	@FXML
	private TextField txtID;
	@FXML
	private DatePicker dtDOB;
	@FXML
	private Button CustomerSaveButton;
	@FXML
	private Button CustomerClearButton;
	@FXML
	private Button AddAttendanceButton;
	@FXML
	private Button DeleteAttendanceButton;
	@FXML
	private TextField txtSearch;
	@FXML
	private TableView<Menu_CustomerModel> TableCustomers;
	@FXML
	private TableColumn<Menu_CustomerModel, String> CustomersID;
	@FXML
	private TableColumn<Menu_CustomerModel, String> CustomersFirst_Name;
	@FXML
	private TableColumn<Menu_CustomerModel, String> CustomersLast_Name;
	@FXML
	private TableColumn<Menu_CustomerModel, String> CustomersEmail;
	@FXML
	private TableView<Menu_CustomerModel> TableCustomerAttendance;
	@FXML
	private TableColumn<Menu_CustomerModel, String> CustomerAttFirst_Name;
	@FXML
	private TableColumn<Menu_CustomerModel, String> CustomerAttLast_Name;
	@FXML
	private TableColumn<Menu_CustomerModel, String> CustomerAttDate;
	@FXML
	private TableColumn<Menu_CustomerModel, String> CustomerAttAMPM;
	
	private boolean isCustomersAddNewButtonClick;
	private boolean isCustomersEditButtonClick;
	
	Connection connection;
    private Statement statement;
    private ResultSet resultSet;
    
    private String temp;
    
	
    @Override
    public void initialize(URL location, ResourceBundle resources) {


       
        //Get data from adminTableData ObservableList and set this data on JavaFX table column

        CustomersFirst_Name.setCellValueFactory(new PropertyValueFactory<Menu_CustomerModel,String>("CustomersFirst_Name")); 
        CustomersLast_Name.setCellValueFactory(new PropertyValueFactory<Menu_CustomerModel,String>("CustomersLast_Name"));
        CustomersID.setCellValueFactory(new PropertyValueFactory<Menu_CustomerModel,String>("CustomersID"));
        CustomersEmail.setCellValueFactory(new PropertyValueFactory<Menu_CustomerModel,String>("CustomersEmail"));
        
        TableCustomers.setItems(Customers_Table_Screen.getDataFromSqlAndAddToObservableList("SELECT * FROM Customers", "SELECT * FROM Customers_Attendance"));

    }
	
	@FXML
    private void setCustomersAddNewButtonClick(Event event){
        CustomersSetAllEnable();
        isCustomersAddNewButtonClick = true;
    }
	
	private void CustomersSetAllEnable(){
        txtFirst_Name.setDisable(false);
        txtLast_Name.setDisable(false);
        txtEmail.setDisable(false);
        txtPhone.setDisable(false);
        txtAddress.setDisable(false);
        dtDOB.setDisable(false);
        txtID.setDisable(false);
        

        CustomerSaveButton.setDisable(false);
        CustomerClearButton.setDisable(false);

    }
	
	private void CustomersSetAllDisable(){
        txtFirst_Name.setDisable(true);
        txtLast_Name.setDisable(true);
        txtEmail.setDisable(true);
        txtPhone.setDisable(true);
        txtAddress.setDisable(true);
        dtDOB.setDisable(true);
        txtID.setDisable(true);
        

        CustomerSaveButton.setDisable(true);
        CustomerClearButton.setDisable(true);

    }
	
	
	 private void CustomersSetAllClear(){
		 	txtFirst_Name.clear();
	        txtLast_Name.clear();
	        txtEmail.clear();
	        txtPhone.clear();
	        txtAddress.clear();
	        dtDOB.setValue(null);
	        txtID.clear();
	       	        
	    }
	 
	 @FXML
	 private void CustomersSetAllClear(Event event){
			txtFirst_Name.clear();
	        txtLast_Name.clear();
	        txtEmail.clear();
	        txtPhone.clear();
	        txtAddress.clear();
	        dtDOB.setValue(null);
	        txtID.clear();
	       	        
	    }
	
	 @FXML
	    private void setCustomerSaveButtonClick(Event event){
	        try{	       
	            connection = SqliteConnection.Connector();
	            statement = connection.createStatement();
	        
	            if(isCustomersAddNewButtonClick){
	                int rowsAffected = statement.executeUpdate("insert into`Customers` "+
	                        "(`First_Name`,`Last_Name`, ID, `Email`,`Phone`,"+
	                        "`Address`,`DOB`"+
	                        ") "+
	                        "values ('"+txtFirst_Name.getText()+"','"+txtLast_Name.getText()+"',"+txtID.getText() + ",'"+txtEmail.getText()
	                        +"','"+txtPhone.getText()
	                        +"','"+txtAddress.getText()
	                        +"','"+dtDOB.getValue().toString()
	                       
	    
	                        +"'); ");
	           
	            }
	            else if (isCustomersEditButtonClick){

	                int rowsAffected = statement.executeUpdate("update Customers set "+
	                        "First_Name = '"+txtFirst_Name.getText()+"',"+
	                        "Last_Name = '"+txtLast_Name.getText()+"',"+
	                        "ID = "+txtID.getText()+","+
	                        "Email = '"+txtEmail.getText()+"',"+
	                        "Phone = '"+txtPhone.getText()+"',"+
	                        "Address = '"+txtAddress.getText()+"',"+
	                        "DOB = '"+dtDOB.getValue()+
	                        "' where ID = '"+
	                        temp+"';");
	               /* if (temp.equals(txtID.getText())){
	                    statement.executeUpdate("update studentgpa set dbstudentgpaID ='"+adminTFStudentID.getText()+"' where dbStudentID = '"+ temp+"';");
	                }
	                */
	            }

	            statement.close();
	            connection.close();
	        }
	        catch (SQLException e){
	            e.printStackTrace();
	        }
	        CustomersSetAllClear();
	        CustomersSetAllDisable();
	        TableCustomers.setItems(Customers_Table_Screen.getDataFromSqlAndAddToObservableList("SELECT * FROM Customers;", "SELECT * FROM Customers_Attendance;" ));
	        isCustomersEditButtonClick=false;
	        isCustomersAddNewButtonClick = false;
	    }
	 
	 @FXML
	    private void setCustomerEditButtonClick(Event event){
	        
	     if(TableCustomers.getSelectionModel().getSelectedItem()!=null) {
	    	 Menu_CustomerModel getSelectedRow = TableCustomers.getSelectionModel().getSelectedItem();
	        	String sqlQuery = "select * FROM Customers where ID = "+getSelectedRow.getCustomers_ID()+";";
	        	 
	        try {
	        	 connection = SqliteConnection.Connector();
		         statement = connection.createStatement();
	             resultSet = statement.executeQuery(sqlQuery);
	        
	             CustomersSetAllEnable();
	             while(resultSet.next()) {
	                 txtFirst_Name.setText(resultSet.getString("First_Name"));
	                 txtLast_Name.setText(resultSet.getString("Last_Name"));
	                 txtEmail.setText(resultSet.getString("Email"));
	                 txtPhone.setText(resultSet.getString("Phone"));
	                 txtAddress.setText(resultSet.getString("Address"));
	                 dtDOB.setValue(LocalDate.parse(resultSet.getString("DOB")));
	                 txtID.setText(resultSet.getString("ID"));
	                 /*try {
	                    if (!(resultSet.getString("DOB").isEmpty())) {
	                        adminDPStudentDOB.setValue(LocalDate.parse(resultSet.getString("dbStudentDOB")));
	                    }
	                }
	                catch (NullPointerException e){
	                    adminDPStudentDOB.setValue(null);
	                }
	                */
	            }

	            temp = txtID.getText();
	            isCustomersEditButtonClick = true;
	        }
	        catch (SQLException e) {
	            e.printStackTrace();
	        }

	     }
	     else{
	    	    NotificationType notificationType = NotificationType.ERROR;
	            TrayNotification tray = new TrayNotification();
	            tray.setTitle("No Customer Selected");
	            tray.setMessage("To edit, please select a Customer from the table");
	            tray.setNotificationType(notificationType);
	            tray.showAndDismiss(Duration.millis(5000));
	     }
		 		
	    }
	 
	 @FXML
	    private void setCustomerDeleteButtonClick(Event event){
		 	if(TableCustomers.getSelectionModel().getSelectedItem()!=null){
		 		Menu_CustomerModel getSelectedRow = TableCustomers.getSelectionModel().getSelectedItem();
		        String sqlQuery = "delete from Customers where ID = '"+getSelectedRow.getCustomers_ID()+"';";
		        try {
		        	connection = SqliteConnection.Connector();
			        statement = connection.createStatement();
		             
		            statement.executeUpdate(sqlQuery);
		            statement.executeUpdate("delete from Customers where ID ='"+getSelectedRow.getCustomers_ID()+"';");
		            TableCustomers.setItems(Customers_Table_Screen.getDataFromSqlAndAddToObservableList("SELECT * FROM Customers;", "SELECT * FROM Customers_Attendance;"));
		            statement.close();
		            connection.close();

		        }
		        catch (SQLException e) {
		            e.printStackTrace();
		        }


		        //adminTableView.setItems(getDataFromSqlAndAddToObservableList(sqlQuery));
		 	}
		 	else{
		 		NotificationType notificationType = NotificationType.ERROR;
	            TrayNotification tray = new TrayNotification();
	            tray.setTitle("No Customer Selected");
	            tray.setMessage("To delete, please select a Customer from the table");
	            tray.setNotificationType(notificationType);
	            tray.showAndDismiss(Duration.millis(5000));
		 	}        
	    }
	 
	 @FXML
	    private void setCustomerSearchButtonClick(Event event){
	        String sqlQuery = "select * FROM Customers where ID = '"+txtSearch.getText()+"';";
	        String sqlQuery2 = "select * FROM Customers_Attendance where ID = '"+txtSearch.getText()+"';";
	        TableCustomers.setItems(Customers_Table_Screen.getDataFromSqlAndAddToObservableList(sqlQuery, sqlQuery2));
	    }
	 
	 @FXML
	    private void setCustomerRefreshButtonClick(Event event){
	        TableCustomers.setItems(Customers_Table_Screen.getDataFromSqlAndAddToObservableList("SELECT * FROM Customers;", "SELECT * FROM Customers_Attendance;" ));//sql Query
	        txtSearch.clear();
	    }
	 

}
